@model EoS.Models.IdeaCarrier.StartupProjectViewModel

<div class="@(Model.UnansweredQuestion == "ProjectName" ? "form-group warning" : "form-group")">
    @Html.LabelFor(model => model.ProjectName, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.ProjectName, new { htmlAttributes = new { @class = "form-control", placeholder = "This is for you only" } })
        @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
    </div>
</div>

<div class="@(Model.UnansweredQuestion == "ProjectDomain" ? "form-group warning" : "form-group")">
    @*class="form-group unanswered" with red frame and a warning text*@
    @Html.LabelFor(model => model.ProjectDomainID, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
    <div class="col-md-10">
        @Html.DropDownListFor(model => model.ProjectDomainID, Model.ProjectDomainList, "Please select a domain", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ProjectDomainID, "", new { @class = "text-danger" })
    </div>
</div>

<div class="@(Model.UnansweredQuestion == "DeadlineDate" ? "form-group warning" : "form-group")">
    @Html.LabelFor(model => model.DeadlineDate, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.DeadlineDate, new { htmlAttributes = new { @class = "form-control date-picker", onkeydown = "return false", onpaste = "return false", @placeholder = "Time you give us to find funding for you" } })
        @Html.ValidationMessageFor(model => model.DeadlineDate, "", new { @class = "text-danger" })
        <input type="button" value="Set date 6 months ahead" onclick="setMonthsAhead(6)" class="btn btn-primary" style="height:25px;padding:1px" />&nbsp;&nbsp;<input type="button" value="Set date 1 year ahead" onclick="setMonthsAhead(12)" class="btn btn-primary" style="height:25px;padding:1px" />
    </div>
</div>

<div class="@(Model.UnansweredQuestion == "ProjectSummary" ? "form-group warning" : "form-group")">
    @Html.LabelFor(model => model.ProjectSummary, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
    <div class="col-md-10">
        @Html.TextAreaFor(model => model.ProjectSummary, 15, 150, new { htmlAttributes = new { @class = "form-control" }, @onkeyup = "countChar(this)", maxlength = "1500", @placeholder = "Add summary about the project idea, note that any information that can identify you, your company or project or someone in the team will be deleted during auditing stage (plain text only)" })
        @Html.ValidationMessageFor(model => model.ProjectSummary, "", new { @class = "text-danger" })
        <label id="charcounter" style="color:green"></label>
    </div>
</div>

<div class="form-group" id="AllowSharing">
    @if (!string.IsNullOrEmpty(Model.AllowSharing_DisplayName))
    {
        Html.Raw(Model.AllowSharing_DisplayName);
    }
    else
    {
        @Html.LabelFor(model => model.AllowSharing, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" }) @*col-md-9  col-md-offset-2"*@
    }
    <div class="checkbox col-md-10">
        @*@Html.EditorFor(model => model.AllowSharing)*@
        @Html.RadioButton("AllowSharing", "Yes", Model.AllowSharing) Yes&nbsp;&nbsp; @*Model.AllowSharing.HasValue ? Model.AllowSharing.Value : false*@
        @Html.RadioButton("AllowSharing", "No", !Model.AllowSharing) No              @*Model.AllowSharing.HasValue ? !Model.AllowSharing.Value : false*@
    </div>
    @*@Html.ValidationMessageFor(model => model.AllowSharing, "", new { @class = "text-danger col-md-9 col-md-offset-2" })*@
</div>

<div class="@(Model.UnansweredQuestion == "AllowedInvestors" ? "form-group warning" : "form-group")">
    <label class="control-label col-md-2" style="text-align: left">Allow us to share to investors</label>
    <div class=" col-md-offset-0 col-md-9" style="margin-left:inherit">
        <table class="borderless">
            <tr>
                @{
                    foreach (var allowedInvestor in Model.AllowedInvestors)
                    {
                        <td><input type="checkbox" name="AllowedInvestorIDs" value="@allowedInvestor.AllowedInvestorID" @(allowedInvestor.Assigned ? "checked=\"checked\"" : "") /> @allowedInvestor.AllowedInvestorName</td>
                        @:</tr><tr>
                    }
                }
            </tr>
        </table>
    </div>
</div>

<hr class="hidden-print"/>
@if (string.IsNullOrEmpty(Model.UnansweredQuestion))
{
    <div class="col-md-offset-4 hidden-print">
        <input type="button" value="Save your answers for the questions in this tab Project" class="btn btn-warning btn-sm" style="color:black;max-width:500px" onclick="SaveData()" />
    </div>
    <div class="col-md-offset-2 hidden-print">
        <h5 class="text-danger">You have to answer all the necessary questions in all tabs before you may submit the form.</h5>
    </div>
}
else
{
    <div class="col-md-offset-4 hidden-print">
        @Html.ActionLink("Cancel submission of form", "SubmitProjectForm", new { id = Model.StartupID, cancel = true, redirect = "ProjectForm", redirectTab = "Project" }, new { @id = "cancelProjectFormSubmission", @class = "btn btn-danger" })
    </div>
}


<script type="text/javascript">

    function setMonthsAhead(months) {
        var newDate = new Date();
        newDate.setMonth(newDate.getMonth() + months);
        document.getElementById("DeadlineDate").value = newDate.toLocaleDateString();
    }

</script>
