@model EoS.Models.IdeaCarrier.StartupProjectViewModel

<div class="@(Model.UnansweredQuestion == "FundingDivisions" ? "form-group warning" : "form-group")">
    <label class="control-label col-md-2" style="text-align:left">How will the funding be spent?<br />(100% max for all 6 fields)</label>
    <div class=" col-md-offset-0 col-md-9" style="margin-left:inherit">
        <table class="borderless">
            <tr>
                @{
                    if (Model.FundingDivisions != null && Model.FundingDivisions.Any())
                    {
                        foreach (var fundingDivision in Model.FundingDivisions)
                        {
                            string fundingDivisionPercentageID = "fundingDivisionPercentage" + fundingDivision.FundingDivisionID.ToString();
                            //string fundingDivisionPercentageMessageID = "fundingDivisionPercentageMessage" + fundingDivision.FundingDivisionID.ToString();

                            <td>@fundingDivision.FundingDivision.FundingDivisionName</td>
                            <td><input type="number" id="@fundingDivisionPercentageID" name="FundingDivisionPercentages" value="@fundingDivision.Percentage" onchange="checkPercentage('@fundingDivisionPercentageID')" class="form-control" style="width:70px" /></td>
                            <td>%</td>
                            @*<td><div id="@fundingDivisionPercentageMessageID" name="fundingDivisionPercentageMessages" class="text-danger"></div></td>*@
                        @:</tr><tr>
                        }
                    }
                    else
                    {
                        @:<td>Funding divisions percentages not set</td>
                    }
                }
            @if (Model.FundingDivisions != null && Model.FundingDivisions.Any())
            {
                @:</tr><tr>
                    @:<td><span style="font-size:x-large;font-weight:normal">&Sigma;</span></td>
                    @:<td><div id="sumOfPercentages" class="col-md-10">@Model.FundingDivisions.Sum(fd => fd.Percentage)</div></td><td>%</td>
                @:</tr>
            }
      </table>    
    </div>
</div>

<div class="@(Model.UnansweredQuestion == "EstimatedExitPlan" ? "form-group warning" : "form-group")">
    @Html.LabelFor(model => model.EstimatedExitPlanID, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
    <div class="col-md-10">
        @Html.DropDownListFor(model => model.EstimatedExitPlanID, Model.EstimatedExitPlanList, "Please select an estimated exit plan", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.EstimatedExitPlanID, "", new { @class = "text-danger" })
    </div>
</div>

<div class="@(Model.UnansweredQuestion == "EstimatedBreakEven"  ? "form-group warning" : "form-group")">
    @Html.LabelFor(model => model.EstimatedBreakEven, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.EstimatedBreakEven, new { htmlAttributes = new { @class = "form-control", @placeholder = "In term of #years" } })
        @Html.ValidationMessageFor(model => model.EstimatedBreakEven, "", new { @class = "text-danger" })
    </div>
</div>

<div class="@(Model.UnansweredQuestion == "PossibleIncomeStreams" ? "form-group warning" : "form-group")">
    @Html.LabelFor(model => model.PossibleIncomeStreams, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.PossibleIncomeStreams, new { htmlAttributes = new { @class = "form-control", @placeholder = "10 equals to any number" } }) @*from 0 to 10*@
        @Html.ValidationMessageFor(model => model.PossibleIncomeStreams, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.HavePayingCustomers, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" }) @*width:220px"*@
    <div class="checkbox col-md-10">
        @*<div class="radio">*@
        @*@Html.EditorFor(model => model.HavePayingCustomers)*@
        @Html.RadioButton("HavePayingCustomers", "Yes", Model.HavePayingCustomers) Yes&nbsp;&nbsp; @*Model.HavePayingCustomers.HasValue ? Model.HavePayingCustomers.Value : false*@
        @Html.RadioButton("HavePayingCustomers", "No", !Model.HavePayingCustomers) No              @*Model.HavePayingCustomers.HasValue ? !Model.HavePayingCustomers.Value : false*@
        @*@Html.ValidationMessageFor(model => model.HavePayingCustomers, "", new { @class = "text-danger" })*@
        @*</div>*@
    </div>
</div>

<hr class="hidden-print"/>
@if (string.IsNullOrEmpty(Model.UnansweredQuestion))
{
    <div class="col-md-offset-4 hidden-print">
        <input type="button" value="Save your answers for the questions in this tab Budget" class="btn btn-warning btn-sm" style="color:black;max-width:500px" onclick="SaveData()" />
    </div>
    <div class="col-md-offset-2 hidden-print">
        <h5 class="text-danger">You have to answer all the necessary questions in all tabs before you may submit the form.</h5>
    </div>
}
else
{
    <div class="col-md-offset-4 hidden-print">
        @Html.ActionLink("Cancel submission of form", "SubmitProjectForm", new { id = Model.StartupID, cancel = true, redirect = "ProjectForm", redirectTab = "Budget" }, new { @id = "cancelProjectFormSubmission", @class = "btn btn-danger" })
    </div>
}

<script type="text/javascript">

    function checkPercentage(percentageId) {
        var percentage = document.getElementById(percentageId);
        var percentageValue = parseInt(percentage.value);
        if (isNaN(percentageValue) || percentageValue < 0) percentageValue = 0;
        var maxPercentageValue = getMaxPercentageValue(document.getElementsByName('FundingDivisionPercentages'), percentage);

        if (percentageValue > maxPercentageValue)
            percentage.value = maxPercentageValue;
        else percentage.value = percentageValue;
        setPercentageSum();
    }

    function getMaxPercentageValue(percentages, percentage) {
        return 100 - sumUpPercentages(percentages) + parseInt(percentage.value);
    }

    function setPercentageSum() {
        var percentageTag = document.getElementById('sumOfPercentages');
        var percentages = document.getElementsByName('FundingDivisionPercentages');

        percentageTag.innerHTML = sumUpPercentages(percentages); //totalPercentage;
    }

    function sumUpPercentages(percentages) {
        var totalPercentage = 0;
        var percentageValue = 0;

        for (var i = 0; i < percentages.length; i++) {
            percentageValue = parseInt(percentages.item(i).value);
            if (!Number.isNaN(percentageValue)) totalPercentage += percentageValue;
        }
        return totalPercentage;
    }

    </script>