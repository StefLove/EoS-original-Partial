@model EoS.Models.IdeaCarrier.Startup

@{
    ViewBag.Title = "Startup project details";
}

<h3>@ViewBag.Title</h3>

<div>
    @*<h4>Startup </h4>*@
    <hr />
    <dl class="dl-horizontal">

        @*Project*@

        <dt>
            @Html.DisplayNameFor(model => model.StartupID)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.StartupID)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.StartupName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.StartupName)
        </dd>

        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
        {
            <dt>
                @Html.Raw("IdeaCarrier Id")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UserID)
            </dd>

            <dt>
                @Html.Raw("IdeaCarrier User Name")
            </dt>
            <dd>
                @ViewBag.IdeaCarrierUserName
            </dd>
        }

        <dt>
            @Html.DisplayNameFor(model => model.Country.CountryName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>

        @if (Model.SwedishRegionID.HasValue)
        {
            <dt>
                @Html.DisplayNameFor(model => model.SwedishRegionID)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.SwedishRegion.RegionName)
            </dd>
        }

        <dt>
            @Html.DisplayNameFor(model => model.ProjectDomain.ProjectDomainName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ProjectDomain.ProjectDomainName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.DeadlineDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.DeadlineDate)
        </dd>

        <dd class="hidden-print">
            @Html.TextAreaFor(model => model.ProjectSummary, new { @readonly = "readonly", @rows = "10", @cols = "150" })
        </dd>
        <dd class="visible-print">
            <hr style="border-color:darkgrey; background-color:darkgrey;" />
            @Html.Raw(Model.ProjectSummary.Replace("\n", "<br />"))
            <hr style="border-color:darkgrey; background-color:darkgrey;" />
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.AllowSharing)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.AllowSharing)
        </dd>

        @*Funding*@

        <dt>
            @Html.DisplayNameFor(model => model.FundingPhase.FundingPhaseName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.FundingPhase.FundingPhaseName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.FundingAmount.FundingAmountValue)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.FundingAmount.FundingAmountValue)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.FutureFundingNeeded)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.FutureFundingNeeded)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.AlreadySpentTime)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.AlreadySpentTime)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.AlreadySpentMoney)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.AlreadySpentMoney)
        </dd>
  
        <dt>
            @Html.DisplayNameFor(model => model.WillSpendOwnMoney)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.WillSpendOwnMoney)
        </dd>

        @*Budget*@

        <dt>
            @Html.DisplayNameFor(model => model.ProjectFundingDivisions)
        </dt>
        <dd>
            @if (Model.ProjectFundingDivisions != null && Model.ProjectFundingDivisions.Any())
            {
                var orderedFundingDivisions = Model.ProjectFundingDivisions.OrderBy(fd => fd.FundingDivision.FundingDivisionID);
                foreach (var fundingDivision in orderedFundingDivisions)
                {
                    @Html.Raw(fundingDivision.FundingDivision.FundingDivisionName + "&nbsp;&nbsp;" + fundingDivision.Percentage + "%" +"<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.EstimatedExitPlan.EstimatedExitPlanName) @*planID?*@
        </dt>
        <dd>
            @Html.DisplayFor(model => model.EstimatedExitPlan.EstimatedExitPlanName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.EstimatedBreakEven)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.EstimatedBreakEven)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.PossibleIncomeStreams)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.PossibleIncomeStreams)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.HavePayingCustomers)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.HavePayingCustomers)
        </dd>

        @*Team*@

        <dt>
            @Html.DisplayNameFor(model => model.TeamMemberSize)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TeamMemberSize)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TeamExperience)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TeamExperience)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TeamVisionShared)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TeamVisionShared)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.HaveFixedRoles)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.HaveFixedRoles)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TeamWeaknesses)
        </dt>
        <dd>
            @if (Model.TeamWeaknesses != null && Model.TeamWeaknesses.Count() > 0)
            {
                var orderedTeamWeaknesses = Model.TeamWeaknesses.OrderBy(w => w.TeamWeaknessName);
                foreach (var teamweakness in orderedTeamWeaknesses)
                {
                    @Html.Raw(teamweakness.TeamWeaknessName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LookingForActiveInvestors)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.LookingForActiveInvestors)
        </dd>

        @*Outcome*@

        <dt>
            @Html.DisplayNameFor(model => model.Outcomes)
        </dt>
        <dd>
            @if (Model.Outcomes != null && Model.Outcomes.Count() > 0)
            {
                var orderedOutcomes = Model.Outcomes.OrderBy(o => o.OutcomeName);
                foreach (var outcome in orderedOutcomes)
                {
                    @Html.Raw(outcome.OutcomeName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.InnovationLevelID)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.InnovationLevel.InnovationLevelName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Scalability)
        </dt>

        @if (Model.ScalabilityID.HasValue)
        {
            <dd>
                @Html.DisplayFor(model => model.Scalability)
            </dd>
        }
        else
        {
            <dd>
                @Html.Raw("None")
            </dd>
        }

        @*The rest*@        

        <dt>
            @Html.DisplayNameFor(model => model.CreatedDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.CreatedDate)
        </dd>      

        <dt>
            @Html.DisplayNameFor(model => model.LastSavedDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.LastSavedDate)
        </dd>

        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
        {

            if (Model.Locked)
            {
                if (Model.MatchMakings.Any())
                {
                    <dt>
                        @Html.DisplayNameFor(model => model.MatchMakings)
                    </dt>
                    <dd>
                        @Model.MatchMakings.Count()
                        @Html.Raw(" matching Investment profiles found:<br />")

                        @foreach (var matchMaking in Model.MatchMakings)
                        {
                            @Html.ActionLink(linkText: matchMaking.InvestmentId, actionName: "ProfileDetails", controllerName: "Investments", routeValues: new { id = matchMaking.InvestmentId }, htmlAttributes: new { title = "Investment profile details" }) <br />
                        }
                    </dd>
                }

                <dt>
                    @Html.DisplayNameFor(model => model.ApprovedByID)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.ApprovedBy.UserName) @*ViewBag.ApprovedBy*@
                </dd>
            }
            else
            {
                <dt>
                    @Html.Raw("Form")
                </dt>
                <dd>
                    @*@Html.Raw(DateTime.Now.Date.Subtract(Model.LastSavedDate.Date).Days);
                    @Html.Raw(" days since last saved");*@

                    @{int daysSincelastSaved = DateTime.Now.Date.Subtract(Model.LastSavedDate.Date).Days;
                        string message = daysSincelastSaved + (daysSincelastSaved == 1 ? " day" : " days") + " since last saved";}
                    @Html.Raw(message)

                    <span class="hidden-print">
                        @if (daysSincelastSaved >= 1)
                        {
                            <text>&nbsp;&nbsp;</text>
                            @Html.ActionLink("Remind", "Reminder", new { id = Model.StartupID, subject = "Finish Startup form" + Model.StartupID, message = message, redirect = "Details" }, new { @class = "btn btn-danger" })
                        }
                    </span>
                </dd>
            }
        }
        else if (ViewBag.UserRole == EoS.Models.Role.IdeaCarrier.ToString())
        {
        if (Model.Locked)
        {
                <dt>
                    @Html.Raw("No of Matched Profiles")
                </dt>
                <dd>
                    @if (Model.MatchMakings.Any())
                    {
                        @Html.DisplayFor(model => model.MatchMakings.Count())
                    }
                    else
                    {
                        @Html.Raw("0")
                    }
                </dd>

                <dt>
                    @Html.Raw("Form")
                </dt>
                <dd>
                    @Html.ActionLink("Unlock it", "Unlock", new { id = Model.StartupID }, new { @class = "btn btn-success" })                    
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Approved)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.Approved)
                </dd>
            }
            else
            {
                <dt>
                    @Html.Raw("Form")
                </dt>
                <dd>
                   @Html.ActionLink("Finish it!", "ProjectForm", new { id = Model.StartupID }, new { @class = "btn btn-danger" })
                </dd>
            }
        }
    </dl>
    @Html.Action("DocumentList", new { startupID = Model.StartupID })
</div>

<div class="hidden-print">
    @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString() && Model.Locked)
    {
        if (Model.Approved)
        {
            @Html.ActionLink("Disapprove", "ChangeApproval", new { id = Model.StartupID, redirect = "Details" }, new { @class = "btn btn-danger" })
        }
        else
        {
            @Html.ActionLink("Approve", "ChangeApproval", new { id = Model.StartupID, redirect = "Details" }, new { @class = "btn btn-success" })
        }
    }
</div>

<p class="hidden-print">
    @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
    {
        @Html.ActionLink("Back to Startup projects", "Index")
    }
    else
    {
        @Html.ActionLink("Back to your Startup projects", "Index")
    }

    @if (!Model.Locked && ViewBag.UserRole == EoS.Models.Role.IdeaCarrier.ToString())
    {
        @*<text>|</text>
            @Html.ActionLink("Edit", "Edit", new { id = Model.StartupID })*@
        <text>|</text>
        @Html.ActionLink("Remove project", "RemoveProject", new { id = Model.StartupID }, new { @style = "color:red" })
    }
    else if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
    {
        <text>|</text>
        @Html.ActionLink("Case Preview", "GeneratePDF", new { id = Model.StartupID }, new { target = "_blank" })
        <text>|</text>
        @Html.ActionLink("Edit", "EditAdmin", new { id = Model.StartupID })
    }
</p>
