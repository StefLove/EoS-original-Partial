@model EoS.Models.MMM.RunMMMViewModel

@{
    ViewBag.Title = "Match Making Motor";
}

<h3>@ViewBag.Title</h3>

@Html.ValidationSummary(true, "", new { @class = "text-danger" })

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.Id)

    @*if (!string.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="text-danger" style="font-size:22px">@Html.Raw(ViewBag.Message)</div>
            <br /><text>&nbsp;</text><br />
        }*@

    <div class="form-horizontal">

        @if (Model.MatchableInvestmentProfileList.Any())
        {
            <div class="form-group">
                @Html.LabelFor(model => model.MatchableInvestmentProfileId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (Model.MatchableInvestmentProfileList.Any() && Model.MatchableInvestmentProfileList.Count() > 1)
                    {
                        @Html.DropDownListFor(model => model.MatchableInvestmentProfileId, Model.MatchableInvestmentProfileList, "All", new { @class = "form-control" })
                    }
                    else if (Model.MatchableInvestmentProfileList.Count() == 1)
                    {
                        @Html.Raw(Model.MatchableInvestmentProfileList.FirstOrDefault().Text + "\n")
                        <input type="hidden" id="MatchableInvestmentProfileId" name="MatchableInvestmentProfileId" value="@Model.MatchableInvestmentProfileList.FirstOrDefault().Text" class="form-control" />
                    }
                    else
                    {
                        @Html.Raw("None")
                        @*@Html.DropDownListFor(model => model.InvestmentProfileId, Model.InvestmentProfileList, new { @class = "form-control" })*@
                    }
                    @Html.ValidationMessageFor(model => model.MatchableInvestmentProfileId, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.Raw("<h4 class=\"text-danger\">There are no Investment profiles to be matched with.</h4>")
        }

        @if (Model.MatchableStartupProjectList.Any())
        {
            <div class="form-group">
                @Html.LabelFor(model => model.MatchableStartupProjectId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (Model.MatchableStartupProjectList.Any() && Model.MatchableStartupProjectList.Count() > 1)
                    {
                        @Html.DropDownListFor(model => model.MatchableStartupProjectId, Model.MatchableStartupProjectList, "All", new { @class = "form-control" })
                    }
                    else if (Model.MatchableStartupProjectList.Count() == 1)
                    {
                        @Html.Raw(Model.MatchableStartupProjectList.FirstOrDefault().Text + "\n")
                        <input type="hidden" id="MatchableStartupProjectId" name="MatchableStartupProjectId" value="@Model.MatchableStartupProjectList.FirstOrDefault().Text" class="form-control" />
                    }
                    else
                    {
                        @Html.Raw("None")
                        @*@Html.DropDownListFor(model => model.StartupProjectId, Model.StartupProjectList, new { @class = "form-control" })*@
                    }
                    @Html.ValidationMessageFor(model => model.MatchableStartupProjectId, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            @Html.Raw("<h4 class=\"text-danger\">There are no Startup projects to be matched with.</h4>")
        }

        <div class="form-group">
            @*1*@
            @Html.LabelFor(model => model.ProjectDomainSelected, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.ProjectDomainSelected@*, new { @checked = "checked" }*@)
                    @Html.ValidationMessageFor(model => model.ProjectDomainSelected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*2*@
            @Html.LabelFor(model => model.FundingPhaseSelected, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.FundingPhaseSelected)
                    @Html.ValidationMessageFor(model => model.FundingPhaseSelected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*3*@
            @Html.LabelFor(model => model.FundingAmountSelected, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.FundingAmountSelected@*, new { @checked = "checked" }*@)
                    @Html.ValidationMessageFor(model => model.FundingAmountSelected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*4*@
            @Html.LabelFor(model => model.EstimatedExitPlanSelected, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.EstimatedExitPlanSelected)
                    @Html.ValidationMessageFor(model => model.EstimatedExitPlanSelected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*5*@
            @Html.LabelFor(model => model.TeamSkillsSelected, htmlAttributes: new { @class = "control-label col-md-2"@*, @style = "color:lightgray"*@ })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.TeamSkillsSelected@*, new { disabled = "disabled" }*@)
                    @Html.ValidationMessageFor(model => model.TeamSkillsSelected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*6*@
            @Html.LabelFor(model => model.OutcomesSelected, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.OutcomesSelected)
                    @Html.ValidationMessageFor(model => model.OutcomesSelected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*7*@
            @Html.LabelFor(model => model.InnovationLevelSelected, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.InnovationLevelSelected)
                    @Html.ValidationMessageFor(model => model.InnovationLevelSelected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*8*@
            @Html.LabelFor(model => model.ScalabilitySelected, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.ScalabilitySelected)
                    @Html.ValidationMessageFor(model => model.ScalabilitySelected, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group hidden-print">
            <hr />
            <label class="control-label col-md-2" for="selectAll">&nbsp;</label>
            <div class="col-md-10">
                <input type="button" value="Select all" onclick="selectAll(true)" class="btn btn-primary" style="height:25px;padding:1px" />&nbsp;
                <input type="button" value="Deselect all" onclick="selectAll(false)" class="btn btn-danger" style="height:25px;padding:1px" />&nbsp;
                <input type="button" value="Default selected" onclick="selectAll(null)" class="btn btn-success" style="height:25px;padding:1px" />
                @*<div class="checkbox">
                <input type="checkbox" id="selectAll" value="SelectAll" onclick="selectAll()" />
            </div>*@
            </div>
        </div>

        @if (Model.MatchableInvestmentProfileList.Any() && Model.MatchableStartupProjectList.Any())
        {
            <div class="form-group hidden-print">
                <hr />
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Run" class="btn btn-primary" />
                </div>
            </div>
        }
    </div>
}

<div class="hidden-print">
    <br />&nbsp;<br />
    @Html.ActionLink("To Result list", "Results") |
    @Html.ActionLink("To matchable Investment profiles", "Index", "Investments", new { matchable = true }, null)
</div>

<script type="text/javascript">

    //function selectAll() {
        //if (document.getElementById("selectAll").checked) selectAll2(true);
        //if (document.getElementById("ProjectDomainSelected").checked === true) selectAll2(true);
        //else selectAll2(false);
        //alert(document.getElementById("selectAll").checked);
    //}
    function selectAll(allSelected) {
        if (allSelected === null)
        {
            deselectAll();
            document.getElementById("ProjectDomainSelected").checked = true;
            document.getElementById("FundingAmountSelected").checked = true;
        }
        else if (allSelected) {
            document.getElementById("ProjectDomainSelected").checked = true;
            document.getElementById("FundingPhaseSelected").checked = true;
            document.getElementById("FundingAmountSelected").checked = true;
            document.getElementById("EstimatedExitPlanSelected").checked = true;
            document.getElementById("TeamSkillsSelected").checked = true;
            document.getElementById("OutcomesSelected").checked = true;
            document.getElementById("InnovationLevelSelected").checked = true;
            document.getElementById("ScalabilitySelected").checked = true;
        }
        else deselectAll();
    }

    function deselectAll() {
        document.getElementById("ProjectDomainSelected").checked = false;
        document.getElementById("FundingPhaseSelected").checked = false;
        document.getElementById("FundingAmountSelected").checked = false;
        document.getElementById("EstimatedExitPlanSelected").checked = false;
        document.getElementById("TeamSkillsSelected").checked = false;
        document.getElementById("OutcomesSelected").checked = false;
        document.getElementById("InnovationLevelSelected").checked = false;
        document.getElementById("ScalabilitySelected").checked = false;
    }

</script>
