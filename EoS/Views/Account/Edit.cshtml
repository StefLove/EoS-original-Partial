@model EoS.Models.EditUserViewModel

@{
    ViewBag.Title = "Edit " + ((ViewBag.OwnAccount) ? "Your own " : "") + Model.Role + " account";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Role)

        @if (Model.Role == EoS.Models.Role.Admin.ToString())
        {
        <div class="form-group">
            @Html.LabelFor(model => model.UserFirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserFirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserFirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserLastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserLastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserLastName, "", new { @class = "text-danger" })
            </div>
        </div>
        }
        else
        {
            @Html.HiddenFor(model => model.UserFirstName)
            @Html.HiddenFor(model => model.UserLastName)
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailConfirmed, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.EmailConfirmed)
                    @Html.ValidationMessageFor(model => model.EmailConfirmed, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

    @if (Model.Role == EoS.Models.Role.Admin.ToString())
    {
        @Html.HiddenFor(model => model.CountryId)
    }
    else
    {
        <div class="form-group">
            @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CountryId, Model.Countries, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>
    }

    @*@if (Model.Role == EoS.Models.Role.IdeaCarrier.ToString())
    {*@
        <div class="form-group">
            @Html.LabelFor(model => model.ExpiryDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpiryDate, new { htmlAttributes = new { @class = "form-control date-picker"@*, onkeydown = "return false", onpaste = "return false"*@ } })
                @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })
            </div>
        </div>
    @*}*@
        <div class="form-group">
            @Html.LabelFor(model => model.LockoutEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LockoutEndDate, new { htmlAttributes = new { @class = "form-control date-picker"@*, onkeydown = "return false", onpaste = "return false"*@ } })
                @Html.ValidationMessageFor(model => model.LockoutEndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LockoutEnabled, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.LockoutEnabled)
                    @Html.ValidationMessageFor(model => model.LockoutEnabled, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TwoFactorEnabled, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.TwoFactorEnabled)
                    @Html.ValidationMessageFor(model => model.TwoFactorEnabled, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save the changes" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Account List", "Index", new { accountType = Model.Role }) |
    @{
        if (!ViewBag.OwnAccount)
        {
            string aT = Model.Role == EoS.Models.Role.Admin.ToString() ? EoS.Models.Role.Admin.ToString() : "";
            @Html.ActionLink("Details", "Details", new { id = Model.Id, accountType = aT }); <text>|</text>
            @Html.ActionLink("Delete", "Delete", new { id = Model.Id, accountType = aT }, new { @style = "color:red"} );
        }
        else
        {
           @Html.ActionLink("Details about your account", "Details");
        }

    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
