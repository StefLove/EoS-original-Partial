@model EoS.Models.Investor.InvestmentProfileFormViewModel

@{
    ViewBag.Title = "Investment profile form";
}

<h3>@ViewBag.Title</h3>


@using (Html.BeginForm("accountForm"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div id="wizard">

            @*<h4>Investment</h4>*@
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.InvestmentID)

            @*@Html.HiddenFor(model => model.UserId)*@
            @*@Html.HiddenFor(model => model.CountryID, new { htmlAttributes = new { @class = "form-control" } })*@
            @*@Html.HiddenFor(model => model.SwedishRegionID, new { htmlAttributes = new { @class = "form-control" } })*@
            @*@Html.HiddenFor(model => model.CreatedDate)*@
            @*@Html.HiddenFor(model => model.DueDate)*@
            @*@Html.HiddenFor(model => model.Locked)*@

            @if (ViewData.ModelState.Any(x => x.Value.Errors.Any()))
            {
                <div class="alert alert-danger">
                    <a href="#" class="close" data-dismiss="alert">×</a>
                    <h4>Validation Errors</h4>
                    @Html.ValidationSummary()
                </div>
            }

            <!-- Tabstrip -->
            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active">
                    <a href="#Project" role="tab" data-toggle="tab" onclick="SaveFormData()">Project</a>
                </li>
                <li role="presentation">
                    <a href="#Funding" role="tab" data-toggle="tab" onclick="SaveFormData()">Funding</a>
                </li>
                <li role="presentation">
                    <a href="#Team" role="tab" data-toggle="tab" onclick="SaveFormData()">Team</a>
                </li>
                <li role="presentation">
                    <a href="#Outcome" role="tab" data-toggle="tab" onclick="SaveFormData()">Outcome</a>
                </li>
                <li role="presentation">
                    <a href="#Scalability" role="tab" data-toggle="tab" onclick="SaveFormData()">Scalability</a>
                </li>
            </ul>

            <br /><br />
            <!-- Tab panes -->
            <div class="tab-content">

                <div role="tabpanel" class="tab-pane active" id="Project">

                    <div class="form-group">
                        @Html.LabelFor(model => model.ProfileName, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align: left" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProfileName, new { htmlAttributes = new { @class = "form-control", placeholder = "This is for you only" } })
                            @Html.ValidationMessageFor(model => model.ProfileName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ProjectDomainID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.ProjectDomainID, (SelectList)ViewBag.projectDomainIdEdit, String.Empty, new { @class = "form-control", @onchange = "toggleExtraDomainDisplay(this.value, " + @ViewBag.otherDomainId + ")" })
                            @Html.ValidationMessageFor(model => model.ProjectDomainID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                        @Html.LabelFor(model => model.AlreadySpentTime, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align: left" })
                        <div class="col-md-9">
                            <div class="checkbox col-md-10">
                                @Html.EditorFor(model => model.AlreadySpentTime)
                                @Html.ValidationMessageFor(model => model.AlreadySpentTime, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>*@
                   
                    </div> <!--Project tab end-->

                    <div role="tabpanel" class="tab-pane" id="Funding">

                    <div class="form-group">
                        <label class="control-label col-md-2">Funding Phase:</label>
                        <div class=" col-md-offset-2 col-md-10" style="margin-left:0">
                           <table class="borderless">
                           <tr> @{ List<EoS.Models.Investor.InvestorFundingPhaseViewModel> FundingPhases = ViewBag.fundingPhaseViewModel;
                                    foreach (var phase in FundingPhases)
                                    {
                                      @:<td><input type="checkbox" name="selectedFundingPhases" value="@phase.FundingPhaseID" @(Html.Raw(phase.Assigned ? "checked=\"checked\"" : "")) /> @phase.FundingPhaseName</td>
                                      @:</tr><tr>
                                    }
                                 }
                            </tr>
                           </table>
                           @Html.ValidationMessageFor(model => model.FundingPhases, "", new { @class = "text-danger" })
                         </div>
                        </div>

                        <div class="form-group">
                                    <label class="control-label col-md-2">Funding Support (SEK):</label>
                                    <div class=" col-md-offset-2 col-md-10" style="margin-left:0">
                                        <table class="borderless">
                                            <tr>
                                                @{ List<EoS.Models.Investor.InvestorFundingAmountViewModel> FundingAmounts = ViewBag.FundingSupportViewModel;
                                                    foreach (var amount in FundingAmounts)
                                                    {
                                                        @:<td><input type="checkbox" name="selectedFundingSupport" value="@amount.FundingAmountID" @(Html.Raw(amount.Assigned ? "checked=\"checked\"" : "")) /> @amount.FundingAmountValue</td>
                                                        @:</tr><tr>
                                                        }
                                                        }
                                                    </tr>
                                                </table>
                                                @Html.ValidationMessageFor(model => model.FundingAmounts, "", new { @class = "text-danger" })
                                            </div>
                           </div>

                                        @*<div class="form-group">
                                            @Html.LabelFor(model => model.AlreadySpentMoney, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align: left" })
                                            <div class="col-md-9">
                                                <div class="checkbox col-md-10">
                                                    @Html.EditorFor(model => model.AlreadySpentMoney)
                                                    @Html.ValidationMessageFor(model => model.AlreadySpentMoney, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>*@

                    </div> <!--Funding tab end-->

                <div role="tabpanel" class="tab-pane" id="Team">

                    @*<div class="form-group">
                        @Html.LabelFor(model => model.TeamMemberSize, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TeamMemberSize, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TeamMemberSize, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TeamExperience, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TeamExperience, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TeamExperience, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TeamVisionShared, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align: left" })
                        <div class="col-md-9">
                            <div class="checkbox col-md-10">
                                @Html.EditorFor(model => model.TeamVisionShared)
                                @Html.ValidationMessageFor(model => model.TeamVisionShared, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.HaveFixedRoles, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align: left" })
                        <div class="col-md-9">
                            <div class="checkbox col-md-10">
                                @Html.EditorFor(model => model.HaveFixedRoles)
                                @Html.ValidationMessageFor(model => model.HaveFixedRoles, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>*@

                </div> <!--Team tab end-->

                <div role="tabpanel" class="tab-pane" id="Outcome">
                    <div class="form-group">
                        <label class="control-label col-md-2">The outcome:</label>
                        <div class=" col-md-offset-2 col-md-10" style="margin-left:0">
                            <table class="borderless">
                                <tr>
                                    @{ List<EoS.Models.Investor.InvestorOutcomeViewModel> OutComes = ViewBag.outcomeViewModel;
                                        foreach (var outcome in OutComes)
                                        {
                                            @:
                                            <td><input type="checkbox" name="selectedOutcomes" value="@outcome.OutcomeID" @(Html.Raw(outcome.Assigned ? "checked=\"checked\"" : "")) /> @outcome.OutcomeName</td>
                                            @:</tr><tr>
                                        }
                                    }
                                </tr>
                            </table>
                            @Html.ValidationMessageFor(model => model.Outcomes, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EstimatedBreakEven, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align: left" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EstimatedBreakEven, new { htmlAttributes = new { @class = "form-control", @placeholder = "In term of years" } })
                            @Html.ValidationMessageFor(model => model.EstimatedBreakEven, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                        @Html.LabelFor(model => model.HavePayingCustomers, htmlAttributes: new { @class = "control-label col-md-3", @style = "text-align:left; width:220px" })
                        <div class="col-md-9">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.HavePayingCustomers)
                                @Html.ValidationMessageFor(model => model.HavePayingCustomers, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>*@

                    <div class="form-group">
                        @Html.LabelFor(model => model.PossibleIncomeStreams, htmlAttributes: new { @class = "control-label col-md-2", @style = "text-align:left" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PossibleIncomeStreams, new { htmlAttributes = new { @class = "form-control", @placeholder = "0 to 10" } })
                            @Html.ValidationMessageFor(model => model.PossibleIncomeStreams, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div> <!--Outcome tab end-->

              <div role="tabpanel" class="tab-pane" id="Scalability">
                <div class="form-group">
                    <label class="control-label col-md-2">Level of innovation</label>
                    <div class=" col-md-offset-2 col-md-10" style="margin-left:0">
                        <table class="borderless">
                            <tr>
                                @{ List<EoS.Models.Investor.InvestorInnovationLevelViewModel> InnovationLevels = ViewBag.innovationLevelsViewModel;
                                    foreach (var level in InnovationLevels)
                                    {

                                        @:<td><input type="checkbox" name="selectedInnovationLevels" value="@level.InnovationLevelID" @(Html.Raw(level.Assigned ? "checked=\"checked\"" : "")) /> @level.InnovationLevelName </td>
                                        @:</tr><tr>
                                     }
                                   }
                                            </tr>

                                                </table>
                                              @Html.ValidationMessageFor(model => model.InnovationLevels, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">Required scalability</label>
                        <div class=" col-md-offset-2 col-md-10" style="margin-left:0">
                            <table class="borderless">
                                <tr>
                                    @{ List<EoS.Models.Investor.InvestorScalabilityViewModel> Scalabilities = ViewBag.scalabilitiesViewModel;
                                        foreach (var scalability in Scalabilities)
                                        {
                                            @:
                                            <td><input type="checkbox" name="selectedScalabilities" value="@scalability.ScalabilityID" @(Html.Raw(scalability.Assigned ? "checked=\"checked\"" : "")) /> @scalability.ScalabilityName</td>
                                            @:</tr><tr>
                                        }
                                    }
                                </tr>
                            </table>
                            @Html.ValidationMessageFor(model => model.Scalabilities, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">Estimated exit plan:</label>
                        <div class=" col-md-offset-2 col-md-10" style="margin-left:0">

                            <table class="borderless">
                                <tr>
                                    @{ List<EoS.Models.Investor.InvestorEstimatedExitPlanVíewModel> ExitPlans = ViewBag.estimatedExitPlanVMViewModel;
                                        foreach (var plan in ExitPlans)
                                        {

                                                    @: <td><input type="checkbox" name="selectedEstimatedExitPlans" value="@plan.EstimatedExitPlanID" @(Html.Raw(plan.Assigned ? "checked=\"checked\"" : "")) /> @plan.EstimatedExitPlanName  </td>
                                                    @:</tr><tr>
                                                    }
                                                    }
                                                </tr>
                                            </table>
                                          @Html.ValidationMessageFor(model => model.EstimatedExitPlans, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div> <!--Scalability tab end-->

            </div> <!-- Tab panes end -->

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <div style="float:right">
                        <input type="button" class="btn button-next" name="next" value=">" />
                        <input type="button" class="btn button-last" name="last" value=">>" />
                    </div>
                    <div style="float:left">
                        <input type="button" class="btn button-first" name="first" value="<<" />
                        <input type="button" class="btn button-previous" name="previous" value="<" />
                    </div>
                    <div class="col-md-offset-4">
                        <input type="submit" value="Submit" class="btn btn-success" name="submitCommand" onclick="return confirm('Are you sure you wish to submit this form, then it will no longer be editable?');" />
                        <input type="submit" value="Save & Continue later" class="btn btn-primary" />
                        @Html.ActionLink("Back to Investment Profiles", "Index", null, new { @class = "btn btn-default" })
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script async type="text/javascript">

    window.addEventListener("beforeunload", function (event) {

        var xhttp = new XMLHttpRequest();

        //xhttp.onreadystatechange = function () { //<----behövs kanske inte
        //    if (this.readyState == 4 && this.status == 200) {
                //alert("Tab " + tab + "updated");
        //    }
            //else alert("Update failed for tab " + location.hash.remove("#"));
        //};

        xhttp.open("POST", "~Investments/ProfileForm/@Model.InvestmentID?tab=" + tab, true);
        @*@Url.ActionLink("ProfileForm", "Investments", new { id = @Model.InvestmentID, tab = location.hash }), true);*@

        var data = getDataInTab(location.hash.remove("#"));

        xhttp.send(data);

        event.returnValue = "Your data has been saved."; //<---Not shown in all browsers
    });
    function saveFormData() {

        var tab = location.hash.remove("#");

        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                alert("Tab " + tab + "updated");
            }
            else alert("Update failed for tab " + tab);
        };

        xhttp.open("POST", "~Investments/ProfileForm/@Model.InvestmentID?tab=" + tab, true);
        @*@Url.ActionLink("ProfileForm", "Investments", new { id = @Model.InvestmentID, tab = location.hash }), true);*@

        var data = getDataInTab(tab);

        xhttp.send(data);
    }

    function getDataInTab(tab)
    {
        var data = "InvestmentID=" + @Model.InvestmentID;

        if (tab == "Project") {
            //data += "&xx=" + document.getElementById("xx").value; //+...
        }
        else if (tab == "Funding") {
            //data += "&yy=" + document.getElementById("yy").value; //+...
        }
        else if (tab == "Team") {
            //data += "&zz=" + document.getElementById("zz").value; //+...
        }
        else if (tab == "Outcome") {
            //data += "&aa=" + document.getElementById("aa").value; //+...
        }
        else if (tab == "Scalability") {
            //data += "&bb=" + document.getElementById("bb").value; //+...
        }

        return data;
    }
}
</script>