@model IEnumerable<EoS.Models.Investor.Investment>

@if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
{
    <h4>Your External id is @ViewBag.InvestorExternalId</h4>
    @*<h4>Are you an active investor? @(ViewBag.ActiveInvestor ? "Yes" : "No")&nbsp;&nbsp;@Html.ActionLink("Change your activation", "ActivateInvestor", new { id = ViewBag.InvestorID }, new { @class = (ViewBag.ActiveInvestor ? "btn btn-primary hidden-print" : "btn btn-success hidden-print"), @style = "height:25px;padding:1px" })</h4>*@
}
else if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
{
    <h4>This investors External id is @ViewBag.InvestorExternalId</h4>
    @*<h4>Is this investor active? @(ViewBag.ActiveInvestor ? "Yes" : "No")</h4>*@
}

<hr />
@if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString() && ViewBag.Matchable != null)
{
    if (ViewBag.Matchable)
    {
        ViewBag.Title = "Matchable Startup projects" + (string.IsNullOrEmpty(ViewBag.InvestorUserName) ? "" : " by " + ViewBag.InvestorUserName);
    }
    else if (!ViewBag.Matchable)
    {
        ViewBag.Title = "Unmatchable Startup projects" + (string.IsNullOrEmpty(ViewBag.InvestorUserName) ? "" : " by " + ViewBag.InvestorUserName);
    }
}
else if (!string.IsNullOrEmpty(ViewBag.InvestorUserName))
{
    ViewBag.Title = "Investment profiles by " + ViewBag.InvestorUserName;
}
else
{
    ViewBag.Title = (string.IsNullOrEmpty(ViewBag.InvestorID) ? "Investment profiles" : "Your Investment profiles");
}

<h3>@ViewBag.Title</h3>

@if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
{
    <p class="hidden-print">
        @Html.ActionLink("Match all matchable profiles", "Motor", "MatchMakings", new { Id = ViewBag.InvestorId }, new { @class = "btn btn-primary", @style = "height:25px;padding:1px" }) @*<---Hide if none*@
        <text>&nbsp;</text>
        @if (ViewBag.Matchable == null)
        {
            @Html.ActionLink("Show matchable profile", "Index", new { id = ViewBag.InvestorId, matchable = true }, new { @class = "btn btn-success", @style = "height:25px;padding:1px" })
        }
        else if (ViewBag.Matchable)
        {
            @Html.ActionLink("Show unmatchable profiles", "Index", new { id = ViewBag.InvestorId, matchable = false }, new { @class = "btn btn-danger", @style = "height:25px;padding:1px" })
        }
        else if (!ViewBag.Matchable)
        {
            @Html.ActionLink("Show all profiles", "Index", new { id = ViewBag.InvestorId }, new { @class = "btn btn-primary", @style = "height:25px;padding:1px" })
        }
    </p>
}
@if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
{
    <p class="hidden-print">
        @Html.ActionLink("Add a new Investment profile", "AddNewProfile")
    </p>
}

<table class="table">
    <tr>
        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString() && string.IsNullOrEmpty(ViewBag.InvestorUserName))
        {
            <th>
                @Html.Raw("<span class=\"visible-print\">Investor user name</span>")
                @Html.ActionLink("Investor user name", "Index", new { orderBy = "InvestorUserName" }, htmlAttributes: new { title = "Order by Investor user name", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.InvestmentID)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.InvestmentID).ToString(), "Index", new { orderBy = "InvestmentID" }, htmlAttributes: new { title = "Order by Investment profile id", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.ProfileName)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.ProfileName).ToString(), "Index", new { orderBy = "ProfileName" }, htmlAttributes: new { title = "Order by Investment profile name", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.CountryID)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.CountryID).ToString(), "Index", new { orderBy = "Country" }, htmlAttributes: new { title = "Order by Country", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.SwedishRegionID)@Html.Raw("</span>")
                @Html.ActionLink(HttpUtility.HtmlDecode(Html.DisplayNameFor(model => model.SwedishRegion).ToString()), "Index", new { orderBy = "SwedishRegion" }, htmlAttributes: new { title = "Order by Swedish region (Län)", @class = "hidden-print" })
            </th>
        }
        else //UserRole == Investor
        {
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.InvestmentID)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.InvestmentID).ToString(), "Index", new { orderBy = "InvestmentID" }, htmlAttributes: new { title = "Order by Investment profile id", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.ProfileName)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.ProfileName).ToString(), "Index", new { orderBy = "ProfileName" }, htmlAttributes: new { title = "Order by Investment profile name", @class = "hidden-print" })
            </th>
        }
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.ProjectDomainID)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.ProjectDomainID).ToString(), "Index", new { orderBy = "ProfileDomainName" }, htmlAttributes: new { title = "Order by Profile domain", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">#Matches</span>")
                @Html.ActionLink("Matches", "Index", new { orderBy = "MatchMakingCount" }, htmlAttributes: new { title = "Order by Match making count", @class = "hidden-print" })
            </th>
        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
        {
            <th>
                @Html.Raw("<span class=\"visible-print\">Match makings</span>")
                @Html.ActionLink("Match makings", "Index", new { orderBy = "MatchMakingCount" }, htmlAttributes: new { title = "Order by Match making count", @class = "hidden-print" })
            </th>
        }
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.CreatedDate)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.CreatedDate).ToString(), "Index", new { orderBy = "CreatedDate" }, htmlAttributes: new { title = "Order by Created date", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.DueDate)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.DueDate).ToString(), "Index", new { orderBy = "DueDate" }, htmlAttributes: new { title = "Order by Due date", @class = "hidden-print" })
            </th>
            <th>
                @*@Html.Raw("Days since Last saved")*@
                @Html.Raw("<span class=\"visible-print\">Form</span>")
                @Html.ActionLink("Profile form", "Index", new { orderBy = "LastSavedDate" }, htmlAttributes: new { title = "Order by Last saved date", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">Active?</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.Active).ToString(), "Index", new { orderBy = "Active" }, htmlAttributes: new { title = "Order by Activivity", @class = "hidden-print" })
            </th>
            <th>
                @Html.Raw("<span class=\"visible-print\">")@Html.DisplayNameFor(model => model.LastSavedDate)@Html.Raw("</span>")
                @Html.ActionLink(Html.DisplayNameFor(model => model.LastSavedDate).ToString(), "Index", new { orderBy = "LastSavedDate" }, htmlAttributes: new { title = "Order by Last saved date", @class = "hidden-print" })
            </th>
        <th class="hidden-print"></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString() && string.IsNullOrEmpty(ViewBag.InvestorUserName))
            {
                <td>
                    @Html.DisplayFor(modelItem => item.User.UserName)
                </td>
                
                @*<td>
                    @Html.DisplayFor(modelItem => item.Country.CountryAbbreviation)
                </td>
                <td>
                    @if (item.SwedishRegionID.HasValue)
                    {
                        @Html.DisplayFor(modelItem => item.SwedishRegion.RegionName)
                    }
                </td>*@
            }
            @*else if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
            {*@
                <td>
                    @Html.DisplayFor(modelItem => item.InvestmentID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ProfileName)
                </td>
            @*}*@
            <td>
                @Html.DisplayFor(modelItem => item.ProjectDomain.ProjectDomainName)
            </td>
            <td>
                @item.MatchMakings.Count()
            </td>
            @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
            {
                <td>
                    @if (item.Locked && item.Active && (!item.DueDate.HasValue || item.DueDate.HasValue && item.DueDate.Value.Date > DateTime.Now.Date))
                    {
                        @Html.Raw("<span class=\"visible-print\">Matchable&nbsp;</span>")
                        @Html.ActionLink("Matchable", "Motor", "MatchMakings", new { id = item.InvestmentID }, new { @class = "btn btn-primary hidden-print", @style = "height:25px;padding:1px" })
                    }
                    else
                    {
                        @Html.Raw("None");
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    @if (item.DueDate.HasValue && DateTime.Now.Date > item.DueDate.Value.Date)
                    {
                        @Html.Raw("<span class=\"visible-print\">Date passed&nbsp;</span>")
                        @Html.ActionLink("Date passed", "EditAdmin", new { id = item.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" })
                    }
                    else if (item.DueDate.HasValue && DateTime.Now.Date == item.DueDate.Value.Date)
                    {
                        @Html.Raw("<span class=\"visible-print\">Today&nbsp;</span>")
                        @Html.ActionLink("Today", "EditAdmin", new { id = item.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" })
                    }
                    else if (item.DueDate.HasValue)
                    {
                        int dueDays = item.DueDate.Value.Date.Subtract(DateTime.Now.Date).Days;
                        @Html.Raw("In " + dueDays + (dueDays == 1 ? " day" : " days"));
                        @*@Html.DisplayFor(modelItem => item.DueDate)*@
                    }
                    else
                    {
                        @Html.Raw("Never")
                    }
                </td>
                <td>
                    @if (item.Locked)
                    {
                        @Html.Raw("Locked&nbsp;")
                        @Html.ActionLink("Unlock it", "Unlock", new { id = item.InvestmentID }, new { @class = "btn btn-success hidden-print", @style = "height:25px;padding:1px" })
                    }
                    else
                    {
                        int daysSincelastSaved = DateTime.Now.Date.Subtract(item.LastSavedDate.Date).Days;
                        string message = daysSincelastSaved + (daysSincelastSaved == 1 ? " day" : " days") + " since last saved&nbsp;";
                        @Html.Raw(message);
                        <span class="hidden-print">
                            @if (daysSincelastSaved >= 1)
                            {
                                <text>&nbsp;&nbsp;</text>
                                @Html.ActionLink("Remind", "Reminder", new { id = item.InvestmentID, subject = "Finish your Profile form " + item.InvestmentID, message = message, redirect = (string.IsNullOrEmpty(ViewBag.InvestorUserName) ? "" : "IndexUser") }, new { @class = "btn btn-danger", @style = "height:25px;padding:1px" })
                            }
                        </span>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Active)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastSavedDate)
                </td>
            }
            else //Investor
            {
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    @if (item.DueDate.HasValue && DateTime.Now.Date > item.DueDate.Value.Date)
                    {
                        @Html.Raw("<span class=\"visible-print\">Pay&nbsp;</span>")
                        @Html.ActionLink("Pay", "Contact", "Home", new { subject = "Pay for " + item.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" })
                    }
                    else if (item.DueDate.HasValue)
                    {
                        int dueDays = item.DueDate.Value.Date.Subtract(DateTime.Now.Date).Days;
                        @Html.Raw("In " + dueDays.ToString() + (dueDays == 1 ? " day" : " days"))
                        @*@Html.DisplayFor(modelItem => item.DueDate)*@
                    }
                    else
                    {
                        @Html.Raw("Never")
                    }
                </td>
                <td>
                    @if (!item.Locked)
                    {
                        @Html.Raw("<span class=\"visible-print\">Not finished</span>")
                        @Html.ActionLink("Finish it", "ProfileForm", new { id = item.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" })
                    }
                    else
                    {
                        @Html.Raw("Locked&nbsp;&nbsp;")
                        @Html.ActionLink("Unlock it", "Contact", "Home", new { subject = "Unlock " + item.InvestmentID }, new { @class = "btn btn-primary hidden-print", @style = "height:25px;padding:1px" })
                    }
                </td>
                <td>
                    @if (item.Active)
                    {
                        @Html.Raw("Yes&nbsp;&nbsp;")
                        @Html.ActionLink("Unactivate", "Activate", new { id = item.InvestmentID }, new { @class = "btn btn-primary hidden-print", @style = "height:25px;padding:1px" })
                    }
                    else
                    {
                        @Html.Raw("No&nbsp;&nbsp;")
                        @Html.ActionLink("Activate", "Activate", new { id = item.InvestmentID }, new { @class = "btn btn-success hidden-print", @style = "height:25px;padding:1px" })
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastSavedDate)
                </td>

            }
            <td class="hidden-print">

                @Html.ActionLink("Details", "ProfileDetails", new { id = item.InvestmentID })
                @if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString() && item.DueDate.HasValue)
                {
                    <text>|</text>
                    @Html.ActionLink("Remove", "RemoveProfile", new { id = item.InvestmentID }, new { @style = "color:red" })
                }

            </td>
        </tr>
    }
</table>