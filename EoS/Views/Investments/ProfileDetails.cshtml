@model EoS.Models.Investor.Investment
@*EoS.Models.Investor.InvestmentProfileDetailsViewModel*@

@{
    ViewBag.Title = "Investment profile details";
}

<h3>@ViewBag.Title</h3>

<div>
    @*<h4>Investment</h4>*@
    <hr />
    <dl class="dl-horizontal">

        @*Project*@

        <dt>
            @Html.DisplayNameFor(model => model.InvestmentID)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.InvestmentID)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ProfileName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ProfileName)
        </dd>

        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
        {
            @*<dt>
                @Html.DisplayNameFor(model => model.User.UserName)
            </dt>
            <dd>
                @* @Html.DisplayFor(model => model.User.UserName)* @
                @Html.ActionLink(Model.User.UserName, "Index", new { id = Model.UserId }, new { target = "_blank" })
            </dd>*@

            <dt>
                @Html.Raw("Investor internal ID")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UserId)
            </dd>

            <dt>
                @Html.Raw("Investor external ID")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.User.ExternalId)
            </dd>

            <dt>
                @Html.Raw("Investor user name")
            </dt>
            <dd>
                @{ string investorUserName = ViewBag.InvestorUserName; }
                @Html.ActionLink(investorUserName, "Details", "Account", new { id = Model.UserId }, new { title = "This Investor's account details", target = "_blank" })
            </dd>
        }

        <dt>
            @Html.DisplayNameFor(model => model.CountryID)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>

        @if (Model.SwedishRegionID.HasValue)
        {
            <dt>
                @Html.DisplayNameFor(model => model.SwedishRegionID)
            </dt>
            <dd>
                @ViewBag.SwedishRegionName
                @*@Html.DisplayFor(model => model.SwedishRegion.RegionName)*@
            </dd>
        }

        <dt>
            @Html.DisplayNameFor(model => model.ProjectDomainID)
        </dt>
        <dd>
            @if (Model.ProjectDomainID.HasValue)
            {
                @Html.DisplayFor(model => model.ProjectDomain.ProjectDomainName)
            }
            else
            {
                @Html.Raw("None")
            }
        </dd>

        @*Funding*@

        <dt>
            @Html.DisplayNameFor(model => model.FundingPhases)
        </dt>
        <dd>
            @if (Model.FundingPhases.Any())
            {
                var orderedFundingPhases = Model.FundingPhases.OrderBy(fp => fp.FundingPhaseID);
                foreach (var fundingPhase in orderedFundingPhases)
                {
                    @Html.Raw(fundingPhase.FundingPhaseName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None")
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.FundingAmounts)
        </dt>
        <dd>
            @if (Model.FundingAmounts.Any())
            {
                //Html.Raw(Model.FundingAmounts.Count().ToString() + "<br />");

                var orderedFondingAmounts = Model.FundingAmounts.OrderBy(fa => fa.FundingAmountID);
                foreach (var fondingAmount in orderedFondingAmounts)
                {
                    @Html.Raw(fondingAmount.FundingAmountValue + "<br />");
                }
            }
            else
            {
                @Html.Raw("None")
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.FutureFundingNeeded)
        </dt>
        <dd>
            @(Model.FutureFundingNeeded ? "Yes" : "No")
            @*@Html.DisplayFor(model => model.FutureFundingNeeded)*@
        </dd>

        @*Budget*@

        <dt>
            @Html.DisplayNameFor(model => model.EstimatedExitPlans)
        </dt>
        <dd>
            @if (Model.EstimatedExitPlans.Any())
            {
                var orderedEstimatedExitPlans = Model.EstimatedExitPlans.OrderBy(ee => ee.EstimatedExitPlanID);
                foreach (var estimatedExitPlan in orderedEstimatedExitPlans)
                {
                    @Html.Raw(estimatedExitPlan.EstimatedExitPlanName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None")
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.EstimatedBreakEven)
        </dt>
        <dd>
            @if (Model.EstimatedBreakEven.HasValue)
            {
                @Html.DisplayFor(model => model.EstimatedBreakEven)
            }
            else
            {
                @Html.Raw("Not answered")
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.PossibleIncomeStreams)
        </dt>
        <dd>
            @if (Model.PossibleIncomeStreams.HasValue)
            {
                @Html.DisplayFor(model => model.PossibleIncomeStreams)
            }
            else
            {
                @Html.Raw("Not answered")
            }
        </dd>

        @*Team*@

        <dt>
            @Html.DisplayNameFor(model => model.TeamMemberSizeMoreThanOne)
        </dt>
        <dd>
            @(Model.TeamMemberSizeMoreThanOne ? "Yes" : "No")
            @*@Html.DisplayFor(model => model.TeamMemberSizeMoreThanOne)*@
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TeamHasExperience)
        </dt>
        <dd>
            @(Model.TeamHasExperience ? "Yes" : "No")
            @*@Html.DisplayFor(model => model.TeamHasExperience)*@
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ActiveInvestor)
        </dt>
        <dd>
            @(Model.ActiveInvestor ? "Yes" : "No")
            @*@Html.DisplayFor(model => model.ActiveInvestor)*@
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TeamSkills)
        </dt>
        <dd>
            @if (Model.TeamSkills.Any())
            {
                var orderedTeamSkills = Model.TeamSkills.OrderBy(ts => ts.SkillID);
                foreach (var teamSkill in orderedTeamSkills)
                {
                    @Html.Raw(teamSkill.SkillName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None")
            }
        </dd>

        @*Outcome*@

        <dt>
            @Html.DisplayNameFor(model => model.Outcomes)
        </dt>
        <dd>
            @if (Model.Outcomes.Any())
            {
                var orderedOutcomes = Model.Outcomes.OrderBy(oc => oc.OutcomeID);
                foreach (var outcome in orderedOutcomes)
                {
                    @Html.Raw(outcome.OutcomeName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None")
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.InnovationLevels)
        </dt>
        <dd>
            @if (Model.InnovationLevels.Any())
            {
                var orderedInnovationLevels = Model.InnovationLevels.OrderBy(il => il.InnovationLevelID);
                foreach (var innovationLevel in orderedInnovationLevels)
                {
                    @Html.Raw(innovationLevel.InnovationLevelName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None")
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Scalabilities)
        </dt>
        <dd>
            @if (Model.Scalabilities.Any())
            {
                var orderedScalabilities = Model.Scalabilities.OrderBy(s => s.ScalabilityID);
                foreach (var scalability in orderedScalabilities)
                {
                    @Html.Raw(scalability.ScalabilityName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None")
            }
        </dd>

        @*The rest*@

        <dt>
            @Html.DisplayNameFor(model => model.CreatedDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.CreatedDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastSavedDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.LastSavedDate)
        </dd>

        @if (Model.DueDate.HasValue)
        {
            <dt>
                @Html.DisplayNameFor(model => model.DueDate)
            </dt>
            <dd>
                @if (DateTime.Now.Date > Model.DueDate.Value.Date)
                {
                    if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
                    {
                        @:<span class="visible-print">date passed.</span>
                        @Html.ActionLink("Date passed", "EditAdmin", new { id = Model.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" });
                    }
                    else //Investor
                    {
                        @:<span class="visible-print">date passed. You need to pay for this profile!</span>
                        @Html.ActionLink("Pay for this profile", "Contact", "Home", new { subject = "Payment for " + Model.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" });
                    }
                }
                else
                {
                    @Html.DisplayFor(model => model.DueDate)
                }
            </dd>
        }
        else //if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
        {
            <dt>
                @Html.DisplayNameFor(model => model.DueDate)
            </dt>
            <dd>
                @Html.Raw("Never")
            </dd>
        }

        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString() && Model.MatchMakings.Any())
        {
            <dt>
                @*@Html.DisplayNameFor(model => model.MatchMakings)*@
                @Html.Raw("Matched with")
            </dt>
            <dd>
                @if (Model.MatchMakings != null && Model.MatchMakings.Any())
                {
                    var distinctMatchedProjects = Model.MatchMakings.Select(mm => mm.StartupId).Distinct().ToList();

                    if (distinctMatchedProjects.Count() == 1)
                    {
                        @Html.Raw("1 Startup project:<br />")
                    }
                    else
                    {
                        @Html.Raw(distinctMatchedProjects.Count().ToString() + " Startup projects:<br />")
                    }

                    //if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
                    //{
                    foreach (var distinctMatchedProject in distinctMatchedProjects)
                    {
                        <span class="visible-print">@distinctMatchedProject</span>
                        @Html.ActionLink(distinctMatchedProject, "ProjectDetails", "Startups", new { id = distinctMatchedProject }, new { @class="hidden-print", title = "Startup project details", target = "_blank" })
                        if (distinctMatchedProject != distinctMatchedProjects.Last())
                        {
                            <br />
                        }
                    }
                    //}
                }
                else if (Model.MatchMakings == null || !Model.MatchMakings.Any())
                {
                    @Html.Raw("0 Startup projects.")
                }
                @*else if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
                {
                    foreach (var matchMaking in Model.MatchMakings)
                    {
                        @Html.ActionLink("Case Preview", "GeneratePDF", "Startups", new { id = matchMaking.StartupId }, new { target = "_blank" })<br />
                    }
                }*@
            </dd>
        }
        else if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
        {
            <dt>
                @Html.Raw("#Matching projects")
            </dt>
            <dd>
                @if (Model.MatchMakings.Any())
                {
                    @Model.MatchMakings.Count()
                }
                else
                {
                    @Html.Raw("0")
                }
            </dd>
        }

        @if (Model.Locked && Model.Active && (!Model.DueDate.HasValue || Model.DueDate.HasValue && Model.DueDate.Value > DateTime.Now))
        {
            <dt class="hidden-print"></dt>
            <dd class="hidden-print">
                @{ string MatchText = "Match with projects"; }
                @if (Model.MatchMakings.Any())
                {
                    MatchText = "Match again with projects";
                }
                @Html.ActionLink(MatchText, "Motor", "MatchMakings", new { id = Model.InvestmentID }, new { @class = "btn btn-primary", @style = "height:25px;padding:1px" })
            </dd>
        }

        <dt>
            @Html.Raw("Profile form")
        </dt>
        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
        {
            if (Model.Locked)
            {
                <dd>
                    @Html.Raw("is locked&nbsp;")
                    @Html.ActionLink("Unlock it", "Unlock", new { id = Model.InvestmentID, redirect = "ProfileDetails" }, new { @class = "btn btn-success hidden-print", @style = "height:25px;padding:1px" })
                </dd>
            }
            else if (!Model.Locked)
            {
                <dd>
                    @*@Html.Raw(DateTime.Now.Subtract(Model.LastSavedDate).Days)
                    @Html.Raw(" days since last saved");*@

                    @{int daysSincelastSaved = DateTime.Now.Date.Subtract(Model.LastSavedDate.Date).Days;
                        string message = daysSincelastSaved + (daysSincelastSaved == 1 ? " day" : " days") + " since last saved";}
                    @Html.Raw(message)

                    <span class="hidden-print">
                        @if (daysSincelastSaved >= 1)
                        {
                            <text>&nbsp;&nbsp;</text>
                            @Html.ActionLink("Remind about finishing", "Reminder", new { id = Model.InvestmentID, subject = "Finish profile form" + Model.InvestmentID, message = message, redirect = "ProfileDetails" }, new { @class = "btn btn-danger", @style = "height:25px;padding:1px" })
                        }
                    </span>
                </dd>
            }

            <dt>
                @Html.DisplayNameFor(model => model.LastLockedDate)
            </dt>
            <dd>
                @if (Model.LastLockedDate.HasValue)
                {
                    @Html.DisplayFor(model => model.LastLockedDate)
                }
                else
                {
                    @Html.Raw("None")
                }
            </dd>

            @*if (!Model.Locked && DateTime.Now.Subtract(Model.LastSavedDate).Days >= 1)
            {
                <dt class="hidden-print">
                    @Html.Raw("Days since Last Saved")
                </dt>
                <dd class="hidden-print">
                    @Html.Raw(DateTime.Now.Subtract(Model.LastSavedDate).Days)<text>&nbsp;&nbsp;&nbsp;</text>
                    @Html.ActionLink("Remind", "Reminder", new { id = Model.InvestmentID }, new { @class = "btn btn-danger" })
                </dd>
            }*@
            @*<dt>
                @Html.Raw("Form")
            </dt>
            <dd>
                @if (Model.Locked)
                {
                    @Html.ActionLink("Unlock it", "Unlock", new { id = Model.InvestmentID }, new { @class = "btn btn-success" })
                }
                else
                {
                    @Html.Raw("Unlocked")
                }
            </dd>*@
        }
        else if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
        {
            @*<dt>
                @Html.Raw("Profile form")
            </dt>*@
            <dd>
                @if (Model.Locked)
                {
                    @Html.Raw("is locked&nbsp;&nbsp;")
                    @Html.ActionLink("Unlock it", "Contact", "Home", new { subject = "Unlock " + Model.InvestmentID }, new { @class = "btn btn-primary hidden-print", @style = "height:25px;padding:1px" })
                }
                else if (!Model.Locked)
                {
                    if (ViewBag.FormIsFinished)
                    {
                        @Html.Raw("is not submitted and locked.&nbsp;") @Html.ActionLink("Submit & lock it", "SubmitProfileForm", new { id = Model.InvestmentID, redirect = "ProfileDetails" }, new { @class = "btn btn-primary hidden-print", onclick = "onSubmitProfileForm()", @style = "height:25px;padding:1px" })
                        @Html.Raw("&nbsp;or&nbsp;")
                        @Html.ActionLink("Continue with it", "ProfileForm", new { id = Model.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" })
                    }
                    else
                    {
                        @Html.Raw("is not finished.&nbsp;") @Html.ActionLink("Finish it", "ProfileForm", new { id = Model.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" })
                    }
                }
                @*else
                {
                    @Html.Raw("is not locked&nbsp;&nbsp;")
                    @Html.ActionLink("Finish the form and lock it", "ProfileForm", new { id = Model.InvestmentID }, new { @class = "btn btn-danger hidden-print", @style = "height:25px;padding:1px" })
                }*@
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.LastLockedDate)
            </dt>
            <dd>
                @if (Model.LastLockedDate.HasValue)
                {
                    @Html.DisplayFor(model => model.LastLockedDate)
                }
                else
                {
                    @Html.Raw("None")
                }
            </dd>
        }

        <dt>
            @Html.DisplayNameFor(model => model.Active)
        </dt>
        <dd>
            <div>
                @if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
                {
                    if (Model.Active)
                    {
                        @Html.Raw("Yes&nbsp;&nbsp;")
                        @Html.ActionLink("Unactivate", "Activate", new { id = Model.InvestmentID, redirect = "ProfileDetails" }, new { @class = "btn btn-primary hidden-print", onclick = "submitProfileForm()", @style = "height:25px;padding:1px" })
                    }
                    else
                    {
                        @Html.Raw("No&nbsp;&nbsp;")
                        @Html.ActionLink("Activate", "Activate", new { id = Model.InvestmentID, redirect = "ProfileDetails" }, new { @class = "btn btn-success hidden-print", @style = "height:25px;padding:1px" })
                    }
                }
                else
                {
                    @(Model.Active ? "Yes" : "No")
                    @*@Html.DisplayFor(model => model.Active)*@
                }
            </div>
        </dd>

    </dl>
</div>

<p class="hidden-print">
    @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
    {
        @Html.ActionLink("Back to Investment profiles for this Investor", "Index", new { id = Model.UserId })
        <text>|</text>
        @Html.ActionLink("Go to all Investment profiles", "Index")
    }
    else
    {
        @Html.ActionLink("Back to your Investment profiles", "Index")
    }

    @if (Model.DueDate.HasValue && ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
    {
        <text>|</text>
        @Html.ActionLink("Edit", "EditAdmin", new { id = Model.InvestmentID })
    }
    @if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString() && Model.DueDate.HasValue)
    {
        <text>|</text>
        @Html.ActionLink("Remove", "RemoveProfile", new { id = Model.InvestmentID }, new { @style = "color:red" })
    }
</p>

<script type="text/javascript">

    function onSubmitProfileForm() {
        return confirm('Do you really wish to submit the profile form? (It will be locked for editing)');
    }

</script>