@model EoS.Models.Investor.Investment

@{
    ViewBag.Title = "Investment profile details";
}

<h3>@ViewBag.Title</h3>

<div>
    @*<h4>Investment</h4>*@
    <hr />
    <dl class="dl-horizontal">

        @*Project*@

        <dt>
            @Html.DisplayNameFor(model => model.InvestmentID)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.InvestmentID)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ProfileName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ProfileName)
        </dd>

        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
        {
            <dt>
                @Html.Raw("Investor internal id")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UserId)
            </dd>

            <dt>
                @Html.Raw("Investor external id")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.User.ExternalId)
            </dd>

            <dt>
                @Html.Raw("Investor user name")
            </dt>
            <dd>
                @ViewBag.InvestorUserName
            </dd>
        }

        <dt>
            @Html.DisplayNameFor(model => model.CountryID)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>

        @if (Model.SwedishRegionID.HasValue)
        {
            <dt>
                @Html.DisplayNameFor(model => model.SwedishRegionID)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.SwedishRegion.RegionName)
            </dd>
        }

        @if (Model.ProjectDomainID.HasValue)
        {
            <dt>
                @Html.DisplayNameFor(model => model.ProjectDomainID)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ProjectDomain.ProjectDomainName)
            </dd>
        }

        @*Funding*@

        <dt>
            @Html.DisplayNameFor(model => model.FundingPhases)
        </dt>
        <dd>
            @if (Model.FundingPhases != null && Model.FundingPhases.Count() > 0)
            {
                var orderedFundingPhases = Model.FundingPhases.OrderBy(fp => fp.FundingPhaseName);
                foreach (var fundingPhase in orderedFundingPhases)
                {
                    @Html.Raw(fundingPhase.FundingPhaseName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.FundingAmounts)
        </dt>
        <dd>
            @if (Model.FundingAmounts.Any() && Model.FundingAmounts.Count() > 0)
            {
                //Html.Raw(Model.FundingAmounts.Count().ToString() + "<br />");

                var orderedFondingAmounts = Model.FundingAmounts.OrderBy(fa => fa.FundingAmountValue);
                foreach (var fondingAmount in orderedFondingAmounts)
                {
                    @Html.Raw(fondingAmount.FundingAmountValue + "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.FutureFundingNeeded)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.FutureFundingNeeded)
        </dd>

        @*Budget*@

        <dt>
            @Html.DisplayNameFor(model => model.EstimatedExitPlans)
        </dt>
        <dd>
            @if (Model.EstimatedExitPlans.Any() && Model.EstimatedExitPlans.Count() > 0)
            {
                var orderedEstimatedExitPlans = Model.EstimatedExitPlans.OrderBy(ee => ee.EstimatedExitPlanName);
                foreach (var estimatedExitPlan in orderedEstimatedExitPlans)
                {
                    @Html.Raw(estimatedExitPlan.EstimatedExitPlanName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.EstimatedBreakEven)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.EstimatedBreakEven)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.PossibleIncomeStreams)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.PossibleIncomeStreams)
        </dd>

        @*Team*@

        <dt>
            @Html.DisplayNameFor(model => model.TeamMemberSizeMoreThanOne)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TeamMemberSizeMoreThanOne)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TeamHasExperience)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TeamHasExperience)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ActiveInvestor)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ActiveInvestor)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TeamSkills)
        </dt>
        <dd>
            @if (Model.Outcomes.Any() && Model.TeamSkills.Count() > 0)
            {
                var orderedTeamSkills = Model.TeamSkills.OrderBy(ts => ts.SkillName);
                foreach (var teamSkill in orderedTeamSkills)
                {
                    @Html.Raw(teamSkill.SkillName+ "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        @*Outcome*@

        <dt>
            @Html.DisplayNameFor(model => model.Outcomes)
        </dt>
        <dd>
            @if (Model.Outcomes.Any() && Model.Outcomes.Count() > 0)
            {
                var orderedOutcomes = Model.Outcomes.OrderBy(oc => oc.OutcomeName);
                foreach (var outcome in orderedOutcomes)
                {
                    @Html.Raw(outcome.OutcomeName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.InnovationLevels)
        </dt>
        <dd>
            @if (Model.InnovationLevels.Any() && Model.InnovationLevels.Count() > 0)
            {
                var orderedInnovationLevels = Model.InnovationLevels.OrderBy(il => il.InnovationLevelName);
                foreach (var innovationLevel in orderedInnovationLevels)
                {
                    @Html.Raw(innovationLevel.InnovationLevelName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Scalabilities)
        </dt>
        <dd>
            @if (Model.Scalabilities.Any() && Model.Scalabilities.Count() > 0)
            {
                var orderedScalabilities = Model.Scalabilities.OrderBy(s => s.ScalabilityName);
                foreach (var scalability in orderedScalabilities)
                {
                    @Html.Raw(scalability.ScalabilityName + "<br />");
                }
            }
            else
            {
                @Html.Raw("None");
            }
        </dd>

        @*The rest*@

        <dt>
            @Html.DisplayNameFor(model => model.CreatedDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.CreatedDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastSavedDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.LastSavedDate)
        </dd>

        @if (Model.DueDate.HasValue)
        {
            <dt>
                @Html.DisplayNameFor(model => model.DueDate)
            </dt>
            <dd>
                @if (DateTime.Now.Date > Model.DueDate.Value.Date)
                {
                    if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
                    {
                        Html.ActionLink("Date passed", "EditAdmin", new { id = Model.InvestmentID }, new { @class = "btn btn-danger" });
                    }
                    else //Investor
                    {
                        Html.ActionLink("Pay", "Contact", "Home", new { subject = "Payment for " + Model.InvestmentID }, new { @class = "btn btn-danger" });
                    }
                }
            </dd>
        }
        else //if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
        {
            <dt>
                @Html.DisplayNameFor(model => model.DueDate)
            </dt>
            <dd>
                @Html.Raw("Never")
            </dd>          
        }

        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString() && Model.MatchMakings.Any())
        {
            <dt>
                @Html.DisplayNameFor(model => model.MatchMakings)
            </dt>
            <dd>
                @Model.MatchMakings.Count()
                @Html.Raw(" matching Startup projects found:<br />")

                @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
                {
                    foreach (var matchMaking in Model.MatchMakings)
                    {
                        @Html.ActionLink(linkText: matchMaking.StartupId, actionName: "ProjectDetails", controllerName: "Startups", routeValues: new { id = matchMaking.StartupId }, htmlAttributes: new { title = "Startup project details" }) <br />
                    }
                }
                @*else if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
                {
                    foreach (var matchMaking in Model.MatchMakings)
                    {
                        @Html.ActionLink("Case Preview", "GeneratePDF", "Startups", new { id = matchMaking.StartupId }, new { target = "_blank" })<br />
                    }
                }*@
            </dd>
        }
        else if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
        {
            <dt>
                @Html.Raw("No of Matching Projects")
            </dt>
            <dd>
                @if (Model.MatchMakings.Any())
                {
                    @Html.DisplayFor(model => model.MatchMakings.Count())
                }
                else
                {
                    @Html.Raw("0")
                }
            </dd>
        }
        @if (ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
        {
            if (Model.Locked && Model.Active && (!Model.DueDate.HasValue || Model.DueDate.HasValue && Model.DueDate.Value > DateTime.Now))
            {
                <dt></dt>
                <dd>
                    @Html.ActionLink("Match", "Motor", "MatchMakings", new { id = Model.InvestmentID }, new { @class = "btn btn-primary" })
                </dd>
            }
            if (Model.Locked)
            {
                <dt>
                    @Html.Raw("Profile Form")
                </dt>
                <dd>
                    @Html.ActionLink("Unlock", "Unlock", new { id = Model.InvestmentID, redirect = "Details" }, new { @class = "btn btn-primary" })
                </dd>
            }
            else if (!Model.Locked)
            {
                <dt>
                    @Html.Raw("Form")
                </dt>
                <dd>
                    @*@Html.Raw(DateTime.Now.Subtract(Model.LastSavedDate).Days)
                    @Html.Raw(" days since last saved");*@

                    @{int daysSincelastSaved = DateTime.Now.Date.Subtract(Model.LastSavedDate.Date).Days;
                    string message = daysSincelastSaved + (daysSincelastSaved == 1 ? " day" : " days") + " since last saved";}
                    @Html.Raw(message)

                    <span class="hidden-print">
                        @if (daysSincelastSaved >= 1)
                        {
                            <text>&nbsp;&nbsp;</text>
                            @Html.ActionLink("Remind", "Reminder", new { id = Model.InvestmentID, subject = "Finish it" + Model.InvestmentID, message = message, redirect = "ProfileDetails" }, new { @class = "btn btn-danger" })
                        }
                    </span>
                </dd>
            }
            @*if (!Model.Locked && DateTime.Now.Subtract(Model.LastSavedDate).Days >= 1)
            {
                <dt class="hidden-print">
                    @Html.Raw("Days since Last Saved")
                </dt>
                <dd class="hidden-print">
                    @Html.Raw(DateTime.Now.Subtract(Model.LastSavedDate).Days)<text>&nbsp;&nbsp;&nbsp;</text>
                    @Html.ActionLink("Remind", "Reminder", new { id = Model.InvestmentID }, new { @class = "btn btn-danger" })
                </dd>
            }*@
            @*<dt>
                @Html.Raw("Form")
            </dt>
            <dd>
                @if (Model.Locked)
                {
                    @Html.ActionLink("Unlock it", "Unlock", new { id = Model.InvestmentID }, new { @class = "btn btn-success" })
                }
                else
                {
                    @Html.Raw("Unlocked")
                }
            </dd>*@
            

            }
                else //if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
            {
            <dt>
                @Html.Raw("Form")
            </dt>
            <dd>
                @if (Model.Locked)
                {
                    @Html.ActionLink("Unlock it", "Contact", "Home", new { subject = "Unlock " + Model.InvestmentID }, new { @class = "btn btn-success" })
                }
                else
                {
                    @Html.ActionLink("Finish it", "ProfileForm", new { id = Model.InvestmentID }, new { @class = "btn btn-danger" })
                }
                @Html.DisplayFor(model => model.Locked)
            </dd>
        }
        <dt>
            @Html.DisplayNameFor(model => model.Active)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Active)
        </dd>
    </dl>
</div>

<div class="hidden-print">
    @if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
    {
        if (Model.Active)
        {
            @Html.ActionLink("Unactive", "Activate", new { id = Model.InvestmentID, redirect = "Details" }, new { @class = "btn btn-success", @style = "width:120px" })
        }
        else
        {
            @Html.ActionLink("Activate", "Activate", new { id = Model.InvestmentID, redirect = "Details" }, new { @class = "btn btn-danger", @style = "width:120px" })
        }
    }
</div>

<p class="hidden-print">
    @Html.ActionLink("Back to your Investment profiles", "Index")

    @*@if (!Model.Locked && ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
    {
        <text>|</text>
        @Html.ActionLink("Profile form", "ProfileForm", new { id = Model.InvestmentID })
    }
    else*@

    @if (Model.DueDate.HasValue && ViewBag.UserRole == EoS.Models.Role.Admin.ToString())
    {
        <text>|</text>
        @Html.ActionLink("Edit", "EditAdmin", new { id = Model.InvestmentID }) 
    }
    @if (ViewBag.UserRole == EoS.Models.Role.Investor.ToString())
    {
        <text>|</text>
        @Html.ActionLink("Remove", "RemoveProfile", new { id = Model.InvestmentID }, new { @style = "color:red" } )
    }
</p>
